/*
 * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0, which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception, which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */

// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.sun.ts.tests.rmiiiop.ee.orbtests;

import java.io.Serializable;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.ORB;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.ServantObject;

public class _HelloRMIIIOPObjectIntf_Stub extends Stub
    implements HelloRMIIIOPObjectIntf {

  private static final String[] _type_ids = {
      "RMI:com.sun.ts.tests.rmiiiop.ee.orbtests.HelloRMIIIOPObjectIntf:0000000000000000" };

  public String[] _ids() {
    return _type_ids;
  }

  public String hello() throws java.rmi.RemoteException {
    if (!Util.isLocal(this)) {
      try {
        org.omg.CORBA_2_3.portable.InputStream in = null;
        try {
          OutputStream out = _request("hello", true);
          in = (org.omg.CORBA_2_3.portable.InputStream) _invoke(out);
          return (String) in.read_value(String.class);
        } catch (ApplicationException ex) {
          in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
          String $_id = in.read_string();
          throw new UnexpectedException($_id);
        } catch (RemarshalException ex) {
          return hello();
        } finally {
          _releaseReply(in);
        }
      } catch (SystemException ex) {
        throw Util.mapSystemException(ex);
      }
    } else {
      ServantObject so = _servant_preinvoke("hello",
          HelloRMIIIOPObjectIntf.class);
      if (so == null) {
        return hello();
      }
      try {
        return ((HelloRMIIIOPObjectIntf) so.servant).hello();
      } catch (Throwable ex) {
        Throwable exCopy = (Throwable) Util.copyObject(ex, _orb());
        throw Util.wrapException(exCopy);
      } finally {
        _servant_postinvoke(so);
      }
    }
  }
}
